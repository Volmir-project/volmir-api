{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Final Project","text":""},{"location":"#idea","title":"Idea","text":"<p>Habits are hard to follow if you are not held accountable, this app solves that by providing a platform where users can track their daily habits, set goals, and maintain consistency through accountability features.</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#frontend","title":"Frontend","text":"<ul> <li>React.js with built-in and custom hooks and functional components</li> <li>Main Components:<ul> <li>User Profile</li> <li>Calendar.</li> </ul> </li> <li>Styling: Chakra UI with custom components</li> <li>HTTP Client: Axios for API communication with the Django backend</li> </ul>"},{"location":"#backend","title":"Backend","text":"<ul> <li>Django with Django REST Framework for API development</li> <li>Would be hosted on AWS EC2 instance using the free tier (t2.micro) </li> <li>SQLite for simple data storage</li> <li>RESTful API design handling CRUD operations</li> <li>Django's built-in authentication system with token-based authentication for secure user sessions</li> </ul>"},{"location":"#cloud-architecture","title":"Cloud Architecture","text":"<pre><code>graph TB\n    Users[\" Users\"] --&gt; S3[\" React Frontend&lt;br/&gt;S3 Static Hosting&lt;br/&gt;\"]\n    Users --&gt; EC2[\"Django Backend&lt;br/&gt;Single EC2 Instance&lt;br/&gt;t2.micro Free Tier\"]\n    EC2 --&gt; SQLite[\"SQLite Database&lt;br/&gt;Local EBS Storage\"]\n\n    subgraph \"AWS Free Tier\"\n        S3\n        EC2\n        SQLite\n    end\n\n    style Users fill:#e1f5fe\n    style S3 fill:#f3e5f5\n    style EC2 fill:#e8f5e8\n    style SQLite fill:#fff3e0</code></pre>"},{"location":"#infrastructure","title":"Infrastructure","text":"<ul> <li>React application would be built and deployed to Amazon S3</li> <li>Django application would be deployed on a single EC2 t2.micro instance</li> <li>SQLite database file would be stored locally on the EC2 instance's EBS volume</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<ol> <li> <p>Frontend Deployment: </p> <ul> <li>Would build React application using <code>npm run build</code></li> <li>Would upload static files to S3 bucket configured for static website hosting</li> </ul> </li> <li> <p>Backend Deployment:</p> <ul> <li>Would use EC2 instance running Amazon Linux 2</li> </ul> </li> <li> <p>Database Management: </p> <ul> <li>SQLite database would be automatically created during Django migrations </li> </ul> </li> </ol>"},{"location":"#tradeoffs","title":"Tradeoffs","text":""},{"location":"#advantages","title":"Advantages","text":"<ul> <li>Entire stack would run at zero cost</li> <li>Minimal components, easy deployment</li> <li>SQLite with local storage eliminates network latency</li> <li>Perfect for prototypes and proof of concepts</li> </ul>"},{"location":"#risks","title":"Risks","text":"<ul> <li>EBS failure = database gone</li> <li>SQLite struggles with concurrent writes</li> <li>One EC2 instance</li> <li>High traffic causes database lock errors</li> </ul> <p>It would be good to migrate to alternative infrastructures if app has several users.</p>"},{"location":"#alternative-infrastructure","title":"Alternative Infrastructure","text":"<pre><code>graph TB\n    Users[\"Users\"] --&gt; ALB[\"ApplicationLoad Balancer\"]\n\n    ALB --&gt; ECS[\"Amazon ECSContainer Service\"]\n\n    ECS --&gt; Backend[\"Django ContainerGunicorn + Python\"]\n\n    Backend --&gt; RDS[\"Amazon RDSPostgreSQL\"]\n    Backend --&gt; Redis[\"ElastiCacheRedis Cache\"]\n\n    subgraph \"Container Orchestration\"\n        ECS\n        Frontend\n        Backend\n    end\n\n    style Users fill:#e1f5fe\n    style ALB fill:#e8f5e8\n    style Frontend fill:#f3e5f5\n    style Backend fill:#e8f5e8\n    style RDS fill:#fff3e0\n    style Redis fill:#ffebee</code></pre>"},{"location":"#container-architecture-benefits","title":"Container Architecture Benefits","text":"<ul> <li>ECS would automatically scale containers based on demand</li> <li>Load balancer would distribute traffic across multiple container instances</li> <li>Docker containers would ensure identical environments from development to production</li> <li>Containers would use fewer resources than full virtual machines</li> <li>Container images would enable simple, repeatable deployments</li> </ul>"}]}